var documenterSearchIndex = {"docs":
[{"location":"#StatGeochemBase","page":"Home","title":"StatGeochemBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for StatGeochemBase.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#StatGeochemBase.DictDataset","page":"Home","title":"StatGeochemBase.DictDataset","text":"DictDataset(t::NamedTuple, elements=keys(t))\n\nConvert a tuple-based dataset to a dict-based dataset. \n\nSee also TupleDataset\n\nExamples\n\njulia> t \nNamedTuple with 2 elements:\n  La  = Vector{Float64}(100,)   [0.6809734028326375 ... 0.30665937715972313]\n  Yb  = Vector{Float64}(100,)   [0.8851029525168138 ... 0.866246147690925]\n\njulia> d = DictDataset(t)\nDict{String, Vector{Float64}} with 2 entries:\n  \"Yb\" => [0.885103, 0.284384, 0.351527, 0.643542, 0.631274, 0.653966, 0.968414, 0.00204819, 0.0655173, 0.5343…\n  \"La\" => [0.680973, 0.35098, 0.0198742, 0.139642, 0.0703337, 0.0328973, 0.639431, 0.245205, 0.424142, 0.48889…    \n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.TupleDataset","page":"Home","title":"StatGeochemBase.TupleDataset","text":"TupleDataset(d::Dict, elements=keys(d))\n\nConvert a dict-based dataset to a tuple-based dataset. \n\nSee also DictDataset\n\nExamples\n\njulia> d\nDict{String, Vector{Float64}} with 2 entries:\n  \"Yb\" => [0.823733, 0.0531003, 0.47996, 0.560998, 0.001816, 0.455064, 0.694017, 0.737816, 0.0755015, 0.46098 …\n  \"La\" => [0.440947, 0.937551, 0.464318, 0.694184, 0.253974, 0.521292, 0.857979, 0.0545946, 0.716639, 0.597616…\n\njulia> t = TupleDataset(d)\nNamedTuple with 2 elements:\n  Yb  = Vector{Float64}(100,)   [0.8237334494155881 ... 0.012863893327602627]\n  La  = Vector{Float64}(100,)   [0.44094669199955616 ... 0.5371416189174069]\n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.arcdistance-NTuple{4, Any}","page":"Home","title":"StatGeochemBase.arcdistance","text":"arcdistance(latᵢ,lonᵢ,lat,lon)\n\nCalculate the distance on a sphere between the point (latᵢ,lonᵢ) and any number of points in (lat,lon). Latitude and Longitude should be specified in decimal degrees\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.cntr-Tuple{Union{NTuple{N, T}, AbstractRange{<:T}, AbstractArray{<:T}} where {T, N}}","page":"Home","title":"StatGeochemBase.cntr","text":"cntr(edges::Collection)\n\nGiven an array of bin edges, return a corresponding vector of bin centers\n\nExamples\n\njulia> cntr(1:10)\n 1.5:1.0:9.5\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.concatenatedatasets-Tuple","page":"Home","title":"StatGeochemBase.concatenatedatasets","text":"concatenatedatasets(d1::NamedTuple, d2::NamedTuple,... ;[elements::Vector{Symbol}])\nconcatenatedatasets(d1::AbstractDict, d2::AbstractDict,... ;[elements::Vector{String}])\n\nVertically concatenate two or more Dict- or Tuple-based datasets, variable-by-variable. Optionally, a list of variables to include may be specified in elements\n\nExamples\n\njulia> d1 = Dict(\"La\" => rand(5), \"Yb\" => rand(5))\nDict{String, Vector{Float64}} with 2 entries:\n  \"Yb\" => [0.221085, 0.203369, 0.0657271, 0.124606, 0.0975556]\n  \"La\" => [0.298578, 0.481674, 0.888624, 0.632234, 0.564491]\n\njulia> d2 = Dict(\"La\" => rand(5), \"Ce\" => rand(5))\nDict{String, Vector{Float64}} with 2 entries:\n  \"Ce\" => [0.0979752, 0.108585, 0.718315, 0.771128, 0.698499]\n  \"La\" => [0.538215, 0.633298, 0.981322, 0.908532, 0.77754]\n\njulia> concatenatedatasets(d1,d2)\nDict{String, Vector{Float64}} with 3 entries:\n  \"Ce\" => [NaN, NaN, NaN, NaN, NaN, 0.0979752, 0.108585, 0.718315, 0.771128, 0.698499]\n  \"Yb\" => [0.221085, 0.203369, 0.0657271, 0.124606, 0.0975556, NaN, NaN, NaN, NaN, NaN]\n  \"La\" => [0.298578, 0.481674, 0.888624, 0.632234, 0.564491, 0.538215, 0.633298, 0.981322, 0.908532, 0.77754]\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.containsi-Tuple{AbstractString, Union{AbstractChar, AbstractString}}","page":"Home","title":"StatGeochemBase.containsi","text":"containsi(haystack, needle)\n\nConverts both haystack and needle to strings and checks whether string(haystack) contains string(needle), ignoring case.\n\nExamples\n\njulia> containsi(\"QuickBrownFox\", \"brown\")\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.copyat!-Tuple{DenseArray, Any, AbstractVector{Bool}}","page":"Home","title":"StatGeochemBase.copyat!","text":"copyat!(dest, src, tₛ::AbstractVector{Bool})\n\nCopy from src to dest when tₛ is true. Equivalent to dest .= src[tₛ], but without inducing allocations.\n\nSee also reversecopyat!\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.count_unique!-Tuple{Any}","page":"Home","title":"StatGeochemBase.count_unique!","text":"n = count_unique!(A)\n\nSort the array A in-place (if not already sorted), move unique elements to the front, and return the number of unique elements found.\n\nA[1:count_unique!(A)] should return an array equivalent to unique(A)\n\nExamples\n\njulia> A = rand(1:5, 10)\n10-element Vector{Int64}:\n 4\n 4\n 2\n 3\n 3\n 4\n 1\n 5\n 1\n 2\n\njulia> A = rand(1:5, 7)\n7-element Vector{Int64}:\n 1\n 1\n 4\n 3\n 1\n 1\n 4\n\njulia> n = count_unique!(A)\n3\n\njulia> A\n7-element Vector{Int64}:\n 1\n 3\n 4\n 1\n 3\n 4\n 4\n\njulia> A[1:n]\n3-element Vector{Int64}:\n 1\n 3\n 4\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.delim_string_function-Tuple{Function, AbstractString, Char, Type}","page":"Home","title":"StatGeochemBase.delim_string_function","text":"delim_string_function(f, str, delim, T;\n    \tmerge::Bool=false,\n\nParse a delimited string str with delimiter delim into substrings that will then be operated upon by function f. The results of f will be returned in an array with eltype T.\n\nExamples\n\njulia> delim_string_function(x -> delim_string_parse(x, ',', Int32, undefval=0), \"1,2,3,4\n5,6,7,8\n9,10,11,12\n13,14,15,16\", '\n', Array{Int32,1})\n4-element Vector{Vector{Int32}}:\n [1, 2, 3, 4]\n [5, 6, 7, 8]\n [9, 10, 11, 12]\n [13, 14, 15, 16]\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.delim_string_parse","page":"Home","title":"StatGeochemBase.delim_string_parse","text":"delim_string_parse(str, delim, T;\n    \tmerge::Bool=false,\n    \tundefval=NaN)\n\nParse a delimited string str with delimiter delim into values of type T and return the answers as an array with eltype T\n\nOptional keyword arguments and defaults:\n\nmerge::Bool=false\n\nMerge repeated delimiters?\n\nundefval=NaN\n\nA value to subsitute for any value that cannot be parsed to type T.\n\nSee also delim_string_parse! for an in-place version.\n\nExamples\n\njulia> delim_string_parse(\"1,2,3,4,5\", ',', Float64)\n5-element Vector{Float64}:\n 1.0\n 2.0\n 3.0\n 4.0\n 5.0\n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.delim_string_parse!","page":"Home","title":"StatGeochemBase.delim_string_parse!","text":"delim_string_parse!(result, str, delim, [T];\n    \toffset::Integer=0,\n    \tmerge::Bool=false,\n    \tundefval=NaN)\n\nParse a delimited string str with delimiter delim into values of type T and return the answers in a pre-allocated result array provided as input.\n\nIf T is not specified explicitly, the eltype of the result array will be used by default.\n\nOptional keyword arguments and defaults:\n\noffset::Integer=0\n\nStart writing the parsed results into result at index 1+offset\n\nmerge::Bool=false\n\nMerge repeated delimiters?\n\nundefval=NaN\n\nA value to subsitute for any value that cannot be parsed to type T.\n\nSee also delim_string_parse for a non-in-place version that will automatically allocate a result array.\n\nExamples\n\njulia> A = zeros(100);\n\njulia> n = delim_string_parse!(A, \"1,2,3,4,5\", ',', Float64)\n5\n\njulia> A[1:n]\n5-element Vector{Float64}:\n 1.0\n 2.0\n 3.0\n 4.0\n 5.0\n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.draw_from_distribution!-Tuple{DenseArray{<:AbstractFloat}, Union{NTuple{N, AbstractFloat}, AbstractArray{<:AbstractFloat}} where N}","page":"Home","title":"StatGeochemBase.draw_from_distribution!","text":"draw_from_distribution!(x::DenseArray{<:AbstractFloat}, dist::Collection{AbstractFloat})\n\nFill an existing variable x with random floating point numbers drawn from a continuous probability distribution specified by a vector dist defining the PDF curve thereof.\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.draw_from_distribution-Tuple{Union{NTuple{N, AbstractFloat}, AbstractArray{<:AbstractFloat}} where N, Integer}","page":"Home","title":"StatGeochemBase.draw_from_distribution","text":"draw_from_distribution(dist::Collection{AbstractFloat}, n::Integer)\n\nDraw n random floating point numbers from a continuous probability distribution specified by a collection dist defining the PDF curve thereof.\n\nExamples\n\njulia> draw_from_distribution([0,1,2,1,0.], 7)\n7-element Vector{Float64}:\n 0.5271744125470383\n 0.6624591724796276\n 0.7737643383545575\n 0.9603780726501608\n 0.7772477857811155\n 0.8307248435614027\n 0.6351766227803024    \n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.elementify-Tuple{AbstractArray}","page":"Home","title":"StatGeochemBase.elementify","text":"elementify(data::AbstractArray, [elements=data[1,:]];\n    \timportas=:Dict,\n    \tstandardize::Bool=true,\n    \tfloattype=Float64,\n    \tskipstart::Integer=1,\n    \tskipnameless::Bool=true\n)\n\nConvert a flat array data into a Named Tuple (importas=:Tuple) or Dictionary (importas=:Dict) with each column as a variable. Tuples are substantially more efficient, so should be favored where possible.\n\nExamples\n\njulia> A = [\"La\" \"Ce\" \"Pr\"; 1.5 1.1 1.0; 3.7 2.9 2.5]\n3×3 Matrix{Any}:\n  \"La\"   \"Ce\"   \"Pr\"\n 1.5    1.1    1.0\n 3.7    2.9    2.5\n\njulia> elementify(A, importas=:Tuple)\nNamedTuple with 3 elements:\nLa  = Vector{Float64}(2,) [1.5 ... 3.7]\nCe  = Vector{Float64}(2,) [1.1 ... 2.9]\nPr  = Vector{Float64}(2,) [1.0 ... 2.5]\n\njulia> elementify(A, importas=:Dict)\nDict{String, Union{Vector{Float64}, Vector{String}}} with 4 entries:\n  \"Ce\"       => [1.1, 2.9]\n  \"Pr\"       => [1.0, 2.5]\n  \"elements\" => [\"La\", \"Ce\", \"Pr\"]\n  \"La\"       => [1.5, 3.7]\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.exportdataset","page":"Home","title":"StatGeochemBase.exportdataset","text":"exportdataset(dataset, [elements], filepath, delim;\n    \tfloatout::Bool=false,\n    \tfindnumeric::Bool=false,\n    \tskipnan::Bool=true,\n    \tdigits::Integer,\n    \tsigdigits::Integer\n    \trows=:\n)\n\nConvert a dict or named tuple of vectors into a 2-D array with variables as columns Export a dataset (in the form of either a Dict or a NamedTuple), optionally specifying which elements to export, as a delimited ASCII text file with the name specified by filepath and delimiter delim.\n\nPossible keyword arguments include:\n\n\tdigits\n\tsigdigits\n\nSpecify a number of absolute or significant digits to which to round the printed output. Default is no rounding.\n\n\tskipnan\n\nLeave NaNs as empty cells in the delimited output file. Boolean; true by default.\n\n\tfloatout\n\nForce all output to be represented as a floating-point number, or else NaN. Boolean; false by default.\n\n\tfindnumeric\n\nExport only numeric columns. Boolean; false by default.\n\n\trows\n\nspecify which rows of the dataset to export. Default : exports all rows.\n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.fast_inv_sqrt-Tuple{Float64}","page":"Home","title":"StatGeochemBase.fast_inv_sqrt","text":"fast_inv_sqrt(x)\n\nThe infamous fast inverse square root of x, in 32 and 64 bit versions. Can be up to 10x faster than base 1/sqrt(x), though with nontrivial loss of precision. The implementations here are good to about 4 ppm.\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.find_grid_inpolygon-NTuple{4, Any}","page":"Home","title":"StatGeochemBase.find_grid_inpolygon","text":"(columns, rows) = find_grid_inpolygon(grid_x, grid_y, poly_x, poly_y)\n\nFind the indexes of grid points that fall within a polygon for a grid with cell centers given by gridx (j-columns of grid) and gridy (i-rows of grid). Returns a list of rows and columns in the polygon\n\nExamples\n\n```julia julia> grid_x = -1.5:1/3:1.5;\n\njulia> grid_y = -1.5:1/3:1.5;\n\njulia> cols,rows = findgridinpolygon(gridx, gridy, [-.4,.4,.4,-.4],[.4,.4,-.4,-.4]) ([5, 5, 6, 6], [5, 6, 5, 6])\n\njulia> grid_x[cols] 4-element Vector{Float64}:  -0.16666666666666666  -0.16666666666666666   0.16666666666666666   0.16666666666666666\n\njulia> grid_y[rows] 4-element Vector{Float64}:  -0.16666666666666666   0.16666666666666666  -0.16666666666666666   0.16666666666666666\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.findclosest-Tuple{Any, Union{NTuple{N, T}, AbstractRange{<:T}, AbstractArray{<:T}} where {T, N}}","page":"Home","title":"StatGeochemBase.findclosest","text":"findclosest(needles, haystack)\n\nReturn the index of the numerically closest value in the indexable collection haystack for each value in needles. If muliple values are equally close, the first one is used\n\nExamples\n\njulia> findclosest(3.4, 1:10)\n3\n\njulia> findclosest(3:4, 1:10)\n2-element Vector{Int64}:\n 3\n 4\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.findclosestabove-Tuple{Any, Union{NTuple{N, T}, AbstractRange{<:T}, AbstractArray{<:T}} where {T, N}}","page":"Home","title":"StatGeochemBase.findclosestabove","text":"findclosestabove(needles, haystack)\n\nReturn the index of the nearest value of the indexable collection haystack that is greater than (i.e., \"above\") each value in needles. If no such values exist, returns lastindex(haystack)+1.\n\nExamples\n\njulia> findclosestabove(3.5, 1:10)\n4\n\njulia> findclosestabove(3:4, 1:10)\n2-element Vector{Int64}:\n 4\n 5\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.findclosestbelow-Tuple{Any, Union{NTuple{N, T}, AbstractRange{<:T}, AbstractArray{<:T}} where {T, N}}","page":"Home","title":"StatGeochemBase.findclosestbelow","text":"findclosestbelow(needles, haystack)\n\nReturn the index of the nearest value of the indexable collection haystack that is less than (i.e., \"below\") each value in needles. If no such haystack values exist, returns firstindex(haystack)-1.\n\nExamples\n\njulia> findclosestbelow(3.5, 1:10)\n3\n\njulia> findclosestbelow(3:4, 1:10)\n2-element Vector{Int64}:\n 2\n 3    \n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.findclosestunequal-Tuple{Union{NTuple{N, T}, AbstractRange{<:T}, AbstractArray{<:T}} where {T, N}, Int64}","page":"Home","title":"StatGeochemBase.findclosestunequal","text":"findclosestunequal(x::Collection, i::Integer)\n\nReturn the index of the closest index n to i for which x[n] != x[i], or i if no unequal values of x are found.\n\nExamples\n\njulia> x = [1, 2, 2, 3, 4]\n5-element Vector{Int64}:\n 1\n 2\n 2\n 3\n 4\n\njulia> findclosestunequal(x, 2)\n1\n\njulia> findclosestunequal(x, 3)\n4    \n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.findmatches-Tuple{Any, Union{NTuple{N, T}, AbstractRange{<:T}, AbstractArray{<:T}} where {T, N}}","page":"Home","title":"StatGeochemBase.findmatches","text":"findmatches(needles, haystack)\n\nReturn the linear index of the first value in haystack (if any) that is equal to a given value in needles for each value in needles; else 0.\n\nExamples\n\njulia> findmatches([3,5],1:10)\n2-element Vector{Int64}:\n 3\n 5\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.findnth-Tuple{Union{NTuple{N, Bool}, AbstractArray{<:Bool}} where N, Integer}","page":"Home","title":"StatGeochemBase.findnth","text":"findnth(t::Collection{Bool}, n::Integer)\n\nReturn the index of the nth true value of t, else length(t)\n\nExamples\n\njulia> t = rand(Bool,5)\n5-element Vector{Bool}:\n 1\n 1\n 0\n 1\n 1\n\njulia> findnth(t, 3)\n4\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.floatify","page":"Home","title":"StatGeochemBase.floatify","text":"floatify(x, T::Type=Float64)\n\nConvert x to a floating-point number (default Float64) by any means necessary\n\nExamples\n\njulia> StatGeochem.floatify(5)\n5.0\n\njulia> StatGeochem.floatify(\"5\")\n5.0\n\njulia> StatGeochem.floatify(\"0x05\")\n5.0\n\njulia> StatGeochem.floatify(\"0.5e1\")\n5.0\n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.hashdataset-Tuple{Union{Dict, NamedTuple}}","page":"Home","title":"StatGeochemBase.hashdataset","text":"hashdataset(ds::Union{Dict, NamedTuple}; digits::Number=3, elements=keys(ds))\n\nCalculate a hash value for each row of a dataset. By default, this considers only the first 3 digits of each number, regardless of scale.\n\nExamples\n\njulia> ds = (La=rand(5), Yb=rand(5)/10)\nNamedTuple with 2 elements:\nLa  = Vector{Float64}(5,)     [0.580683620945775 ... 0.23810020661332487]\nYb  = Vector{Float64}(5,)     [0.014069255862588826 ... 0.067367584177675]\n\njulia> hashdataset(ds)\n5-element Vector{UInt64}:\n0x89a02fa88348e07c\n0x181e78f0ad2af144\n0xa3811bd05cca4743\n0xfcfe1b6edf0c81cf\n0x647868efa9352972\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.image_from_paths-Tuple{Any, Any}","page":"Home","title":"StatGeochemBase.image_from_paths","text":"image_from_paths(xpoints::AbstractMatrix, ypoints::AbstractMatrix; \n    xresolution::Int=1800, \n    yresolution::Int=1200, \n    xrange=nanextrema(xpoints), \n    yrange=nanextrema(ypoints),\n)\n\nProduce a 2d image (histogram) of path densities given a set of x-y points  stored column-wise in separate matrices xpoints and ypoints. x is assumed to be the independent variable (i.e., the x-y points are plotted in order of increasing x).\n\nExamples\n\njulia> nsims = 1000\n1000\n\njulia> xdist = rand(10, nsims);\n\njulia> ydist = rand(10, nsims);\n\njulia> imgcounts, xbincenters, ybincenters = image_from_paths(xpaths, ypaths; xresolution=50, yresolution=50)\n([8 15 … 9 11; 12 4 … 14 11; … ; 9 15 … 9 9; 10 17 … 10 14], -3.715247394908744:0.1523101612461508:3.747950506152645, -3.86556932981587:0.1497772964483582:3.4735181961536803)\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.importdataset","page":"Home","title":"StatGeochemBase.importdataset","text":"function importdataset(filepath, [delim];\n    \timportas=:Dict,\n    \telements=nothing,\n    \tstandardize::Bool=true,\n    \tfloattype=Float64,\n    \tskipstart::Integer=0,\n    \tskipnameless::Bool=true,\n    \tmindefinedcolumns::Integer=0\n)\n\nImport a delimited file specified by filepath with delimiter delim as a dataset in the form of either a Dict or a NamedTuple.\n\nPossible keyword arguments include:\n\n\timportas\n\nSpecify the format of the imported dataset. Options include :Dict and :Tuple\n\n\telements\n\nSpecify the names to be used for each element (i.e., column) of the dataset. Default value (nothing) will cause elements to be read from the first row of the file\n\n\tstandardize\n\nConvert columns to uniform type wherever possible. Boolean; true by default.\n\n\tfloattype\n\nPreferred floating-point type for numerical data. Float64 by default.\n\n\tskipstart\n\nIgnore this many rows at the start of the input file (useful if input file has a header or other text before the column names). 0 by default.\n\n\tskipnameless\n\nSkip columns with no column name. Boolean; true by default\n\n\tmindefinedcolumns\n\nSkip rows with fewer than this number of delimiters. 0 by default.\n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.imsc","page":"Home","title":"StatGeochemBase.imsc","text":"imsc(A::AbstractArray, colormap::AbstractVector=viridis, cmin=nanminimum(A), cmax=nanmaximum(A))\n\nConvert a matrix A to an image (an array of Colors.jl colors) using the specified colormap (default viridis), optionally scaled between cmin and cmax.\n\nExamples\n\njulia> A = rand(3,3)\n3×3 Matrix{Float64}:\n 0.39147   0.553489  0.351628\n 0.331786  0.343836  0.824674\n 0.639233  0.558113  0.965627\n\njulia> img = imsc(A) # N.B. will display as image if `using ImageInTerminal`\n3×3 Array{RGB{N0f8},2} with eltype ColorTypes.RGB{FixedPointNumbers.N0f8}:\n RGB{N0f8}(0.282,0.137,0.455)  …  RGB{N0f8}(0.278,0.051,0.376)\n RGB{N0f8}(0.267,0.004,0.329)     RGB{N0f8}(0.431,0.808,0.345)\n RGB{N0f8}(0.133,0.553,0.553)     RGB{N0f8}(0.992,0.906,0.145)\n\njulia> using Images; save(\"img.png\", img) # Save to file as PNG\n\njulia> using Plots; plot(0:3, 0:3, img) # Plot with specified x and y axes\n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.imsci","page":"Home","title":"StatGeochemBase.imsci","text":"imsci(A::AbstractArray, colormap::AbstractVector=viridis, cmin=nanminimum(A), cmax=nanmaximum(A))\n\nConvert a matrix A to an indirect array image (an IndirectArray of Colors.jl colors) using the specified colormap (default viridis), optionally scaled between cmin and cmax.\n\nAs imsc, but returns an IndirectArray; slightly more space efficient for small colormaps, but with computational cost.\n\nExamples\n\njulia> A = rand(3,3)\n3×3 Matrix{Float64}:\n 0.39147   0.553489  0.351628\n 0.331786  0.343836  0.824674\n 0.639233  0.558113  0.965627\n\n julia> img = imsci(A)\n 3×3 IndirectArrays.IndirectArray{RGB{N0f8}, 2, UInt64, Matrix{UInt64}, Vector{RGB{N0f8}}}:\n  RGB{N0f8}(0.282,0.137,0.455)  …  RGB{N0f8}(0.278,0.051,0.376)\n  RGB{N0f8}(0.267,0.004,0.329)     RGB{N0f8}(0.431,0.808,0.345)\n  RGB{N0f8}(0.133,0.553,0.553)     RGB{N0f8}(0.992,0.906,0.145)\n\njulia> using Images; save(\"img.png\", img) # Save to file as PNG\n\njulia> using Plots; plot(0:3, 0:3, img) # Plot with specified x and y axes\n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.inpolygon-Tuple{Any, Any, Any}","page":"Home","title":"StatGeochemBase.inpolygon","text":"inpolygon(x,y,point)\n\nCheck if a 2D polygon defined by the arrays x, y contains a given point. Returns boolean (true or false)\n\nExamples\n\njulia> x = [0, 1, 1, 0];\n\njulia> y = [0, 0, 1, 1];\n\njulia> inpolygon(x, y, (0.5,0.5))\ntrue\n\njulia> inpolygon(x, y, (0.5,1.5))\nfalse\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.isnumeric-Tuple{Any}","page":"Home","title":"StatGeochemBase.isnumeric","text":"isnumeric(x)\n\nReturn true if x can be parsed as a number, else false\n\nExamples\n\njulia> StatGeochem.isnumeric(1)\ntrue\n\njulia> StatGeochem.isnumeric(\"1\")\ntrue\n\njulia> StatGeochem.isnumeric(\"0.5e9\")\ntrue\n\njulia> StatGeochem.isnumeric(\"foo\")\nfalse\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.leastsigfig-Tuple{Any}","page":"Home","title":"StatGeochemBase.leastsigfig","text":"leastsigfig(d)\n\nReturn the order of magnitude of the least significant decimal digit of a number d.\n\nExamples\n\njulia> leastsigfig(1000)\n1000.0\n\njulia> leastsigfig(1001)\n1.0\n\njulia> leastsigfig(1001.1234)\n0.0001\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.linreg-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{<:Number}}} where T<:Number","page":"Home","title":"StatGeochemBase.linreg","text":"(a,b) = linreg(x::AbstractVector, y::AbstractVector)\n\nReturns the coefficients for a simple linear least-squares regression of the form y = a + bx\n\nExamples\n\njulia> a, b = linreg(1:10, 1:10)\n2-element Vector{Float64}:\n -1.19542133983862e-15\n  1.0\n\njulia> isapprox(a, 0, atol = 1e-12)\ntrue\n\njulia> isapprox(b, 1, atol = 1e-12)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.linterp1!-Tuple{StridedArray, AbstractArray, AbstractArray, Any}","page":"Home","title":"StatGeochemBase.linterp1!","text":"linterp1!(yq::StridedArray, x::AbstractArray, y::AbstractArray, xq; extrapolate=:Linear, knot_index=ones(Int, length(xq)))\n\nIn-place variant of linterp1.\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.linterp1-Tuple{AbstractArray, AbstractArray, Any}","page":"Home","title":"StatGeochemBase.linterp1","text":"yq = linterp1(x::AbstractArray, y::AbstractArray, xq; extrapolate=:Linear)\n\nSimple linear interpolation in one dimension. Given a vector of knots x and values y, find the corresponding y values at position(s) xq.\n\nKnots x must be sorted in increasing order.\n\nIf the optional keyword argument extrapolate is set to :Linear (default), xq values outside the range of x will be extrapolated using a linear extrapolation of the closest two x-y pairs. Otherwise, if extrapolate is set to a Number (e.g., 0, or NaN), that number will be used instead.\n\nExamples\n\njulia> linterp1(1:10, 1:10, 5.5)\n5.5\n\njulia> linterp1(1:10, 1:10, 0.5:10.5)\n11-element Vector{Float64}:\n  0.5\n  1.5\n  2.5\n  3.5\n  4.5\n  5.5\n  6.5\n  7.5\n  8.5\n  9.5\n 10.5\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.linterp1s!-Tuple{StridedArray, StridedArray, StridedArray, Any}","page":"Home","title":"StatGeochemBase.linterp1s!","text":"linterp1s!(yq::StridedArray, x::StridedArray, y::StridedArray, xq; extrapolate=:Linear)\nlinterp1s!(yq::StridedArray, knot_index::StridedArray{Int}, x::StridedArray, y::StridedArray, xq::AbstractArray; extrapolate=:Linear)\n\nIn-place variant of linterp1s. Will sort x and permute y to match, before interpolating at xq and storing the result in yq.\n\nAn optional temporary working array knot_index = similar(xq, Int) may be provided to fully eliminate allocations.\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.linterp1s-Tuple{AbstractArray, AbstractArray, Any}","page":"Home","title":"StatGeochemBase.linterp1s","text":"yq = linterp1s(x::AbstractArray, y::AbstractArray, xq; extrapolate=:Linear)\n\nAs as linterp1 (simple linear interpolation in one dimension), but will sort the knots x and values y pairwise if x if not already sorted in increasing order.\n\nExamples\n\njulia> linterp1s(10:-1:1, 1:10, 5.5)\n5.5\n\njulia> linterp1s(10:-1:1, 1:10, 0.5:10.5)\n11-element Vector{Float64}:\n 10.5\n  9.5\n  8.5\n  7.5\n  6.5\n  5.5\n  4.5\n  3.5\n  2.5\n  1.5\n  0.5\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.linterp2-Tuple{Any, Any, AbstractMatrix, Number, Number}","page":"Home","title":"StatGeochemBase.linterp2","text":"zq = linterp1(x, y, z::AbstractMatrix, xq::Number, yq::Number; extrapolate=:Bilinear)\n\nSimple linear interpolation in one dimension. Given vectors of knots x and y and a matrix of values z, find the corresponding z values at position xq,yq.\n\nKnot vectors x and y must be sorted in increasing order, and must match z in dimension, such that eachindex(x) == axes(z,2) and eachindex(y) == axes(z,1)\n\nIf the optional keyword argument extrapolate is set to :Bilinear (default), out-of-bounds xq,yq pairs will be extrapolated (or interpolated) linearly in x  and then linearly in y (yielding a quadratic result as a whole), based on the  closest four z values. Otherwise, if extrapolate is set to a Number  (e.g., 0, or NaN), that number will be used instead.\n\nExamples\n\njulia> x = 1:3\n 1:3\n\njulia> y = 1:4\n 1:4\n\njulia> z = y*x'\n4×3 Matrix{Int64}:\n 1  2   3\n 2  4   6\n 3  6   9\n 4  8  12\n\njulia> linterp2(x,y,z,1.5,1.5)\n 2.25\n\njulia> linterp2(x,y,z,2.5,3.5)\n 8.75\n\njulia> linterp2(x,y,z,1,-10,extrapolate=:Bilinear)\n -10.0\n\njulia> linterp2(x,y,z,2,-10,extrapolate=:Bilinear)\n -20.0\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.mcmc_surface-Tuple{AbstractRange, AbstractRange, AbstractMatrix}","page":"Home","title":"StatGeochemBase.mcmc_surface","text":"mcmc_surface(xaxis::AbstractRange, yaxis::AbstractRange, llmatrix::AbstractMatrix; \n    nsteps::Int=100000, \n    burnin::Int=10000,\n)\n\nExplore a precomputed log likelihood surface llmatrix with dimensions  xaxis (horizontal, columns) and yaxis (vertical, rows) using a  Markov chain Monte Carlo approach (the Metropolis algorithm) to calculate posterior distributions for x and y.\n\nExamples\n\njulia> xaxis = yaxis = -5:0.01:5\n -5.0:0.01:5.0\n\njulia> llmatrix = [-((x+1)^2/0.5^2 + (y-1)^2/0.5^2) for y in yaxis, x in xaxis];\n\njulia> xdist, ydist, lldist, acceptancedist = mcmc_surface(xaxis,yaxis,llmatrix);\n\njulia> mean(xdist), std(xdist)\n (-0.9888633375860412, 0.41023499283715603)\n\njulia> mean(ydist), std(ydist)\n (1.0110703489524537, 0.4182564675721746)\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.midpointquadrature-Tuple{AbstractRange, Union{NTuple{N, T}, AbstractRange{<:T}, AbstractArray{<:T}} where {T, N}}","page":"Home","title":"StatGeochemBase.midpointquadrature","text":"midpointquadrature(bincenters, values)\n\nAdd up the area under a curve with y positions specified by a vector of values and x positions specfied by a vector of bincenters using midpoint integration.\n\nExamples\n\njulia> midpointquadrature(0:0.1:10, 0:0.1:10)\n50.5\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.minarcdistance-NTuple{4, Any}","page":"Home","title":"StatGeochemBase.minarcdistance","text":"minarcdistance(latᵢ,lonᵢ,lat,lon)\n\nReturn the smallest non-NaN arcdistance (i.e. distance on a sphere in arc degrees) between a given point (latᵢ[i],lonᵢ[i]) and any point in (lat,lon) for each i in eachindex(latᵢ, lonᵢ).\n\nLatitude and Longitude should be specified in decimal degrees\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.nearest-Union{Tuple{T}, Tuple{Type{T}, Any}} where T<:Number","page":"Home","title":"StatGeochemBase.nearest","text":"nearest(T, x)\n\nConvert x to the nearest representable value in type T, rounding if inexact\n\nExamples\n\n```julia julia> nearest(Int, 1234.56) 1235\n\njulia> nearest(Int, Inf) 9223372036854775807\n\njulia> nearest(Int, -Inf) -9223372036854775808 ````\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.nonnumeric-Tuple{Any}","page":"Home","title":"StatGeochemBase.nonnumeric","text":"nonnumeric(x)\n\nReturn true for if x is not missing but cannot be parsed as a number\n\nExamples\n\njulia> StatGeochem.nonnumeric(1)\nfalse\n\njulia> StatGeochem.nonnumeric(\"1\")\nfalse\n\njulia> StatGeochem.nonnumeric(\"0.5e9\")\nfalse\n\njulia> StatGeochem.nonnumeric(\"foo\")\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.norm_quantile-Tuple{Any}","page":"Home","title":"StatGeochemBase.norm_quantile","text":"norm_quantile(F::Number)\n\nHow far away from the mean (in units of sigma) should we expect proportion F of the samples to fall in a standard Gaussian (Normal[0,1]) distribution\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.norm_width-Tuple{Any}","page":"Home","title":"StatGeochemBase.norm_width","text":"norm_width(N::Number)\n\nHow dispersed (in units of sigma) should we expect a sample of N numbers drawn from a standard Gaussian (Normal[0,1]) distribution to be?\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.normcdf!-Tuple{DenseArray, Number, Number, AbstractArray}","page":"Home","title":"StatGeochemBase.normcdf!","text":"normcdf!(result,mu,sigma,x)\n\nIn-place version of normcdf\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.normcdf-Tuple{Any, Any, Any}","page":"Home","title":"StatGeochemBase.normcdf","text":"normcdf(mu,sigma,x)\n\nCumulative distribution function of the Normal (Gaussian) distribution\n\n12 + erf(\fracx-μσ2)2\n\nwith mean mu and standard deviation sigma, evaluated at x.\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.normcdf_ll!-Tuple{AbstractArray}","page":"Home","title":"StatGeochemBase.normcdf_ll!","text":"normcdf_ll!(mu, sigma, x)\n\nFast log likelihood proportional to the natural logarithm of the cumulative distribution function of a Normal (Gaussian) distribution with mean mu and standard deviation sigma, evaluated at x.\n\nAs normcdf_ll, but in-place (using x as a buffer).\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.normcdf_ll-Tuple{Number}","page":"Home","title":"StatGeochemBase.normcdf_ll","text":"normcdf_ll(mu, sigma, x)\n\nFast log likelihood proportional to the natural logarithm of the cumulative distribution function of a Normal (Gaussian) distribution with mean mu and standard deviation sigma, evaluated at x.\n\nIf x, [mu, and sigma] are given as arrays, the sum of the log likelihood over all x will be returned.\n\nSee also normcdf\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.normlogpdf-Tuple{Any, Any, Any}","page":"Home","title":"StatGeochemBase.normlogpdf","text":"normlogpdf(mu, sigma, x)\n\nThe natural logarithm of the probability density function of a Normal (Gaussian)  distribution with mean mu and standard deviation sigma, evaluated at x.\n\nIf x, [mu, and sigma] are given as arrays, the sum of the log probability density over all x will be returned.\n\nSee also normpdf, normlogpdf\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.normlogproduct-NTuple{4, Any}","page":"Home","title":"StatGeochemBase.normlogproduct","text":"normlogproduct(μ1, σ1, μ2, σ2)\n\nThe logarithm of the integral of N[μ1,σ1] * N[μ2,σ2]\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.normpdf-Tuple{Any, Any, Any}","page":"Home","title":"StatGeochemBase.normpdf","text":"normpdf(mu,sigma,x)\n\nProbability density function of the Normal (Gaussian) distribution\n\nℯ^-(x-μ)^2  (2σ^2)  σ2π\n\nwith mean mu and standard deviation sigma, evaluated at x\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.normpdf_ll-Tuple{Any, Any, Any}","page":"Home","title":"StatGeochemBase.normpdf_ll","text":"normpdf_ll(mu, sigma, x)\n\nFast log likelihood proportional to the natural logarithm of the probability density function of a Normal (Gaussian) distribution with mean mu and standard deviation sigma, evaluated at x.\n\nIf x, [mu, and sigma] are given as arrays, the sum of the log likelihood over all x will be returned.\n\nSee also normpdf, normlogpdf\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.normproduct-NTuple{4, Any}","page":"Home","title":"StatGeochemBase.normproduct","text":"normproduct(μ1, σ1, μ2, σ2)\n\nThe integral of the product of two normal distributions N[μ1,σ1] * N[μ2,σ2]. This is itself just another Normal distribution! Specifically, one with variance σ1^2 + σ2^2, evaluated at distance |μ1-μ2| from the mean\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.normproduct_ll-NTuple{4, Any}","page":"Home","title":"StatGeochemBase.normproduct_ll","text":"normproduct_ll(μ1, σ1, μ2, σ2)\n\nFast log likelihood proportional to the integral of N[μ1,σ1] * N[μ2,σ2] As normlogproduct, but using the fast log likelihood of a Normal distribution (i.e., without the preexponential terms).\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.parsedlm-Union{Tuple{T}, Tuple{AbstractString, Char}, Tuple{AbstractString, Char, Type{T}}} where T","page":"Home","title":"StatGeochemBase.parsedlm","text":"parsedlm(str::AbstractString, delimiter::Char, T::Type=Float64; rowdelimiter::Char='\\n', merge::Bool=false)\n\nParse a string delimited by both row and column into a single (2-D) matrix. Default column delimiter is newline. Similar to readdlm, but operating on a string instead of a file.\n\nExamples\n\njulia> parsedlm(\"1,2,3\n4,5,6\n7,8,9\n\", ',', Float64)\n3×3 Matrix{Float64}:\n 1.0  2.0  3.0\n 4.0  5.0  6.0\n 7.0  8.0  9.0\n\njulia> parsedlm(\"1,2,3,4\n5,6,7,8\n9,10,11,12\n13,14,15,16\", ',', Int64)\n4×4 Matrix{Int64}:\n  1   2   3   4\n  5   6   7   8\n  9  10  11  12\n 13  14  15  16\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.renormalize!","page":"Home","title":"StatGeochemBase.renormalize!","text":"renormalize!(dataset, [elements]; total=1.0)\n\nNormalize in-place a (i.e., compositional) dataset defined by a Dict or NamedTuple of one-dimensional numerical arrays, such that all the elements (i.e., variables – by default all keys in the datset) sum to a given total (by default, 1.0).\n\nNote that the arrays representing each element or variable are assumed to be of uniform length\n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.renormalize!-Tuple{AbstractArray}","page":"Home","title":"StatGeochemBase.renormalize!","text":"renormalize!(A::AbstractArray; dim, total=1.0)\n\nNormalize an array A in place such that it sums to total. Optionally may specify a dimension dim along which to normalize.\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.rescale","page":"Home","title":"StatGeochemBase.rescale","text":"rescale(y, min::Number=0, max::Number=1)\n\nRescale a collection of numbers y between a new minimum min and new maximum max\n\nExamples\n\njulia> rescale(1:5)\n5-element Vector{Float64}:\n0.0\n0.25\n0.5\n0.75\n1.0\n\njulia> rescale(1:5, -1, 0)\n5-element Vector{Float64}:\n-1.0\n-0.75\n-0.5\n-0.25\n0.0\n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.reversecopyat!-Tuple{DenseArray, Any, AbstractVector{Bool}}","page":"Home","title":"StatGeochemBase.reversecopyat!","text":"reversecopyat!(dest, src, tₛ::AbstractVector{Bool})\n\nAs copyat!, but also reverse the order of stored elements. \n\nEquivalent to dest .= reverse(src[tₛ]), but without inducing allocations.\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.sanitizevarname-Tuple{Any}","page":"Home","title":"StatGeochemBase.sanitizevarname","text":"sanitizevarname(s::AbstractString)\n\nModify an input string s to transform it into an acceptable variable name.\n\nExamples\n\njulia> StatGeochemBase.sanitizevarname(\"foo\")\n\"foo\"\n\njulia> StatGeochemBase.sanitizevarname(\"523foo\")\n\"_523foo\"\n\njulia> StatGeochemBase.sanitizevarname(\"Length (μm)\")\n\"Length_μm\"\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.sigdigits-Tuple{T} where T<:Number","page":"Home","title":"StatGeochemBase.sigdigits","text":"sigdigits(d)\n\nDetermine the number of decimal significant figures of a number d.\n\nExamples\n\njulia> sigdigits(1000)\n1\n\njulia> sigdigits(1001)\n4\n\njulia> sigdigits(1001.1245)\n8\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.stepify-Tuple{AbstractVector}","page":"Home","title":"StatGeochemBase.stepify","text":"stepify(x::AbstractVector)\n\nDuplicate every element of an array.\n\nTogether with stepifyedges, allows for convenient plotting of  a histogram of bin counts and bin edges as a stepped line.\n\nExamples\n\njulia> stepify([1,3,2])\n6-element Vector{Int64}:\n 1\n 1\n 3\n 3\n 2\n 2\n\njulia> plot(stepifyedges(binedges), stepify(bincounts))\n# Returns a stepped line plot of a histogram\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.stepifyedges-Tuple{AbstractVector}","page":"Home","title":"StatGeochemBase.stepifyedges","text":"stepifyedges(x::AbstractVector)\n\nDuplicate every element of an array except for the first and last.\n\nTogether with stepify, allows for convenient plotting of  a histogram of bin counts and bin edges as a stepped line.\n\nExamples\n\njulia> stepifyedges([1,2,3,4])\n6-element Vector{Int64}:\n 1\n 2\n 2\n 3\n 3\n 4\n\njulia> plot(stepifyedges(binedges), stepify(bincounts))\n# Returns a stepped line plot of a histogram\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.trapezoidalquadrature-Tuple{AbstractRange, Union{NTuple{N, T}, AbstractRange{<:T}, AbstractArray{<:T}} where {T, N}}","page":"Home","title":"StatGeochemBase.trapezoidalquadrature","text":"trapezoidalquadrature(edges, values)\n\nAdd up the area under a curve with y positions specified by a vector of values and x positions specfied by a vector of edges using trapezoidal integration. Bins need not be evenly spaced, though it helps (integration will be faster if edges are specified as an AbstractRange).\n\nExamples\n\njulia> trapezoidalquadrature(0:0.1:10, 0:0.1:10)\n50.0\n\n\n\n\n\n","category":"method"},{"location":"#StatGeochemBase.unelementify","page":"Home","title":"StatGeochemBase.unelementify","text":"unelementify(dataset, elements;\n    \tfloatout::Bool=false,\n    \tfloattype=Float64,\n    \tfindnumeric::Bool=false,\n    \tskipnan::Bool=false,\n    \trows=:\n)\n\nConvert a Dict or Named Tuple of vectors into a 2-D array with variables as columns\n\nExamples\n\njulia> D\nNamedTuple with 3 elements:\n  La  = Vector{Float64}(2,) [1.5 ... 3.7]\n  Ce  = Vector{Float64}(2,) [1.1 ... 2.9]\n  Pr  = Vector{Float64}(2,) [1.0 ... 2.5]\n\njulia> unelementify(D)\n3×3 Matrix{Any}:\n  \"La\"   \"Ce\"   \"Pr\"\n 1.5    1.1    1.0\n 3.7    2.9    2.5\n\n\n\n\n\n","category":"function"},{"location":"#StatGeochemBase.unionize-Tuple{AbstractVector}","page":"Home","title":"StatGeochemBase.unionize","text":"unionize(x::AbstractVector)\n\nTurn an array with possibly abstract element type into one with  eltype equal to a Union of all types of elements in the array.\n\nAlways returns a copy, even if x is already unionized.\n\nExamples\n\njulia> a = Any[false, 0, 1.0]\n3-element Vector{Any}:\n false\n     0\n     1.0\n\njulia> unionize(a)\n3-element Vector{Union{Bool, Float64, Int64}}:\n false\n     0\n     1.0\n\n\n\n\n\n","category":"method"}]
}
